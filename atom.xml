<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanYi&#39;s Blog</title>
  
  <subtitle>猴子每天都会爬树摘果子，猴子不再爬树了，可能是树上没果子了，也可能猴子已经不再是猴子。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-10T12:55:49.642Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YanYi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WKWebView 与 UIWebView 实现 OC与JS交互</title>
    <link href="http://yoursite.com/2018/08/28/OC%20%E4%B8%8E%20JS%20%E4%BA%A4%E4%BA%92/UIWebView%20%E5%AE%9E%E7%8E%B0%20OC%E4%B8%8EJS%E4%BA%A4%E4%BA%92/"/>
    <id>http://yoursite.com/2018/08/28/OC 与 JS 交互/UIWebView 实现 OC与JS交互/</id>
    <published>2018-08-27T16:00:00.000Z</published>
    <updated>2018-09-10T12:55:49.642Z</updated>
    
    <content type="html"><![CDATA[<!--# OC-And-JS-Interaction--><p>相关<a href="https://github.com/XFNicar/OC-and-JS-interaction" target="_blank" rel="noopener">示例源码</a>在这里</p><h2 id="为什么需要交互"><a href="#为什么需要交互" class="headerlink" title="为什么需要交互"></a>为什么需要交互</h2><blockquote><p>由于原生开发的时间周期相对表较长，难免带来一些更新不灵活的问题，有时候为了业务的需要不得不在原生APP中嵌入一些以Web实现的内容，大部分都是静态页面，一般也不会进行二次跳转，而这些页面有时候也会做一些与原生APP进行交互的功能，这些功能通常需要事先制定相应的协议，这些协议中的方法一般会当做通用的API，方便三端在新的规则出现时不需要反复制定规则，只需要在方法中更改相应的参数即可实现新规则下的交互。</p></blockquote><h2 id="WKWebView-amp-amp-UIWebView-实现-OC与JS交互"><a href="#WKWebView-amp-amp-UIWebView-实现-OC与JS交互" class="headerlink" title="WKWebView &amp;&amp; UIWebView 实现 OC与JS交互"></a>WKWebView &amp;&amp; UIWebView 实现 OC与JS交互</h2><blockquote><p>这里分别介绍使用 WKWebView 与 UIWebView 实现基本的 OC与JS 交互的方式，以及一些在业务上的个人建议。在代码上这些都是很容易实现的功能，关键点是如何使用这项功能，相关的HTML5 与 JS 文件都在<a href="https://github.com/XFNicar/OC-and-JS-interaction" target="_blank" rel="noopener">示例代码</a>中<br>，如有不明白的可以继续来这里看看文档。</p></blockquote><h3 id="用WKWebView-实现-OC与JS交互"><a href="#用WKWebView-实现-OC与JS交互" class="headerlink" title="用WKWebView 实现 OC与JS交互"></a>用WKWebView 实现 OC与JS交互</h3><ul><li><strong>准备工作</strong></li></ul><blockquote><ul><li>1 引入 WebKit 框架</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;WebKit/WebKit.h&gt;</span><br><span class="line">@interface WKWebViewController ()</span><br><span class="line">&lt;</span><br><span class="line">WKUIDelegate,</span><br><span class="line">WKNavigationDelegate,</span><br><span class="line">WKScriptMessageHandler// JS 调用原生需要实现的相关协议</span><br><span class="line">&gt;</span><br><span class="line">@property(nonatomic, strong) WKWebView *webView;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><ul><li>2 创建 WKWebView 添加供JS调用的方法名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - Getter</span><br><span class="line">- (WKWebView *)webView &#123;</span><br><span class="line">if (_webView == nil) &#123;</span><br><span class="line">    WKWebViewConfiguration *config = [[WKWebViewConfiguration alloc] init];</span><br><span class="line">    config.preferences = [[WKPreferences alloc] init];</span><br><span class="line">    config.preferences.minimumFontSize = 10;</span><br><span class="line">    config.preferences.javaScriptEnabled = YES;</span><br><span class="line">    config.preferences.javaScriptCanOpenWindowsAutomatically = NO;</span><br><span class="line">    config.userContentController = [[WKUserContentController alloc] init];</span><br><span class="line">    config.processPool = [[WKProcessPool alloc] init];</span><br><span class="line">    _webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:config];</span><br><span class="line">    _webView.UIDelegate = self;</span><br><span class="line">    _webView.navigationDelegate = self;</span><br><span class="line">    _webView.frame = self.view.bounds;</span><br><span class="line">    [config.userContentController addScriptMessageHandler:self name:@&quot;sendMsgToApp&quot;];</span><br><span class="line">&#125;</span><br><span class="line">return _webView;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><ul><li><p>3  这里需要介绍一下 <strong>WKWebViewConfiguration</strong>，不做深入了解的话可以跳过直接看代码 </p><p> <strong>WKWebView</strong> 初始化时，有一个参数叫<strong>configuration</strong>，它是<strong>WKWebViewConfiguration</strong>类型的参数，而<strong>WKWebViewConfiguration</strong>有一个属性叫<strong>userContentController</strong>，它又是<strong>WKUserContentController</strong>类型的参数。<strong>WKUserContentController</strong>对象有一个方法<strong>- addScriptMessageHandler:name:</strong>，我把这个功能简称为<strong>MessageHandler</strong>。添加<strong>MessageHandler</strong>其实就是添加供<strong>WKWebView</strong> 中 <strong>JS</strong> 调用的对象（<strong>heandle</strong>）和方法名(<strong>name</strong>)。</p></li></ul></blockquote><ul><li><strong>交互逻辑之 JS 调用 OC</strong></li></ul><blockquote><p>当我们注册了<strong>userContentController</strong>之后，JS 调用iOS原生就会走这个代理，并且会返回<strong>WKScriptMessage</strong>对象<strong>message</strong>，其中<strong>WKScriptMessage</strong>对象的两个属性是我们所需要的，<strong>message.name</strong> 是我们给JS添加的方法名，<strong>message.body</strong> 则是JS给我们发送的参数值，通常我们只需要注册一个方法名，业务逻辑的区分放到body里面来处理，这样可以方便前端与Native制定新的交互规则的时候，不需要维护新的公共API。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - WKScriptMessageHandler</span><br><span class="line">/**</span><br><span class="line">此处接收并处理来自 JS 的调用</span><br><span class="line">可以根据message.name 来区分调用的是哪个方法 ，</span><br><span class="line">建议只设计一个通用方法来供JS调用</span><br><span class="line">然后根据参数值 message.body 来区分如何处理调用逻辑</span><br><span class="line">也可以根据  参数值来区分如何处理调用事件</span><br><span class="line">@param userContentController 控制器</span><br><span class="line">@param message ：</span><br><span class="line">            message.name (方法名)</span><br><span class="line">            message.body (参数)</span><br><span class="line">*/</span><br><span class="line">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message &#123;</span><br><span class="line">if ([message.name isEqualToString:@&quot;sendMsgToApp&quot;]) &#123; </span><br><span class="line">    [self sendMsgToApp:message];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - WKNavigationDelegate</span><br><span class="line">// webview跳转新页面的时候回调这个方法</span><br><span class="line">- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;#pragma mark WKUIDelegate</span><br><span class="line">// webview如果需要调用系统的控件(alert)则会调用这个方法, 如果设置了UIDelegate,没有实现这个方法，WebView的alert就不会弹出来</span><br><span class="line">- (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler &#123;</span><br><span class="line">UIAlertController *alert = [UIAlertController alertControllerWithTitle:@&quot;OC 调用 JS&quot; message:message preferredStyle:UIAlertControllerStyleAlert];</span><br><span class="line">UIAlertAction *action = [UIAlertAction actionWithTitle:@&quot;知道了小肥仔&quot; style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class="line">   completionHandler();</span><br><span class="line">&#125;];</span><br><span class="line">[alert addAction:action];</span><br><span class="line">[self presentViewController:alert animated:YES completion:nil];&gt;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li><strong>交互逻辑之 OC 调用 JS</strong></li></ul><blockquote><p>   这里的代码非常简单，相关的调用只有一行代码:<br><strong>- evaluateJavaScript:jsStr completionHandler:</strong><br>其中<strong>sendMessageToWebView()</strong>是<strong>WebView</strong>公开给Native调用的公共接口，相关的参数转成字符串放到括号内即可，同样的，前端只需要公开一个API，相关的业务逻辑放到参数里面处理就可以了，也是为了减少维护公共API的成本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Native 调用 JS</span><br><span class="line">- (void)sendMessageToWebView:(UIBarButtonItem *)sender &#123;</span><br><span class="line"> NSString *msg = [NSString stringWithFormat:@&quot;我只是一只小兔几，我什么都不知道。&quot;];</span><br><span class="line">NSString * result = [self noWhiteSpaceString:msg];</span><br><span class="line">// sendMessageToWebView</span><br><span class="line">NSString * jsStr = [NSString stringWithFormat:@&quot;sendMessageToWebView(\&quot;%@\&quot;)&quot;,result];</span><br><span class="line">[self.webView evaluateJavaScript:jsStr completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;</span><br><span class="line">    NSLog(@&quot;交互错误value :%@ error: %@&quot;,result,error);</span><br><span class="line">&#125;];</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="用-UIWebView-实现-OC-与-JS-交互"><a href="#用-UIWebView-实现-OC-与-JS-交互" class="headerlink" title="用 UIWebView 实现 OC 与 JS 交互"></a>用 UIWebView 实现 OC 与 JS 交互</h3><ul><li>准备工作</li></ul><blockquote><p>自然是创建<strong>UIWebView</strong>并设置代理了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">self.webView = [[UIWebView alloc]initWithFrame:CGRectMake(0, 20, [UIScreen mainScreen].bounds.size.width, [UIScreen mainScreen].bounds.size.height)];</span><br><span class="line">self.webView.delegate = self;</span><br><span class="line">NSString* path = [[NSBundle mainBundle] pathForResource:@&quot;source&quot; ofType:@&quot;html&quot;];</span><br><span class="line">NSURL* url = [NSURL fileURLWithPath:path];</span><br><span class="line">NSURLRequest* request = [NSURLRequest requestWithURL:url] ;</span><br><span class="line">[self.webView loadRequest:request];</span><br><span class="line">[self.view addSubview:self.webView];</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li>遵守协议</li></ul><blockquote><p>在该协议中，定义供JS调用的方法，建议设置为一个通用接口，方便JS调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;JavaScriptCore/JavaScriptCore.h&gt;</span><br><span class="line">@protocol JSObjcDelegate &lt;JSExport&gt;</span><br><span class="line">/**</span><br><span class="line">前端调用Native</span><br><span class="line">此API用来供前端（H5）调用，</span><br><span class="line">为了方便制定调用的协议，</span><br><span class="line">此API应该设计成通用API，</span><br><span class="line">其中所涉及的场景应该由参数来决定，</span><br><span class="line">不应设计过多的API</span><br><span class="line">同理前端也应该只需设计一个API供Native调用</span><br><span class="line">@param param 调用参数</span><br><span class="line">*/</span><br><span class="line">- (void)sendMsgToApp:(NSString *)param;</span><br><span class="line">@end</span><br><span class="line">@interface UIWebViewController : UIViewController&lt;UIWebViewDelegate,JSObjcDelegate&gt;</span><br><span class="line">@property (nonatomic, strong) JSContext *jsContext;</span><br><span class="line">@property (strong, nonatomic)  UIWebView *webView;</span><br><span class="line">@end</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li>实现协议方法，并向JSContext注册对象</li></ul><blockquote><p>所谓注册对象，就是告诉JS该调用谁的什么方法,总体来说也就是以下三行代码，只不过根据每个公司前端所写的业务不同，注入时机可能会有所区别，正常来说都是WebView通知Native在合适的时机注入即可，其中的区别我<a href="">写在这里</a>了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - UIWebViewDelegate</span><br><span class="line">- (void)webViewDidStartLoad:(UIWebView *)webView &#123;</span><br><span class="line">self.jsContext = [webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class="line">// 将JS中的iOS_NativeModel对象（JS中定义为什么名称就是什么名称）设置为当前控制器，JS才可以调用当前控制器所遵守协议中的方法</span><br><span class="line">self.jsContext[@&quot;iOS_NativeModel&quot;] = self;</span><br><span class="line">self.jsContext.exceptionHandler = ^(JSContext *context, JSValue *exceptionValue) &#123;</span><br><span class="line">context.exception = exceptionValue;</span><br><span class="line">    NSLog(@&quot;异常信息：%@&quot;, exceptionValue);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li>JS 调用 Native</li></ul><blockquote><p>这里就是在WebView所在的控制器实现之前的协议中的方法即可，JS调用协议中的方法就会来到方法的具体实现，PS：JS所传值为字符串，需要根据相关业务参数看是否需要转化为JSON或其他对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - JSObjcDelegate </span><br><span class="line">// 为保证交互结果的安全可控</span><br><span class="line">// 在native中执行的相关代码务必放在主线程中执行</span><br><span class="line">- (void)sendMsgToApp:(NSString *)param &#123;</span><br><span class="line">dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;param:%@&quot;,param);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li>OC 调用 JS</li></ul><blockquote><p>这里比<strong>WKWebView</strong>稍微复杂一些，但是基本原理是一样的，<strong>UIWebView</strong>这里使用<strong>JSValue</strong>对象来实现，设置所调用的JS函数与参数与<strong>WKWebView</strong>是一样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - Public</span><br><span class="line">// 通过 JSValue 对象发送消息给 WEB 页面</span><br><span class="line">- (void)sendMessageToWebView:(UIBarButtonItem *)sender &#123;</span><br><span class="line">JSValue *jsObject = self.jsContext[@&quot;receiveMsgFromApp&quot;];</span><br><span class="line">NSString *param = [NSString stringWithFormat:@&quot;%@\n%@\n%@\n详细信息：%@&quot;,@&quot;商品获取成功&quot;,@&quot;商品名称:哈哈&quot;,@&quot;商品ID：123456&quot;,@&quot;这是商品信息&quot;];</span><br><span class="line">NSString *callBackStr = [NSString stringWithFormat:@&quot;receiveMsgFromApp(%@)&quot;, param ];</span><br><span class="line">[jsObject callWithArguments:@[callBackStr]];</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="OC与JS交互的简单介绍就到此为止了，如需深入了解，可以关注我的其他内容"><a href="#OC与JS交互的简单介绍就到此为止了，如需深入了解，可以关注我的其他内容" class="headerlink" title="OC与JS交互的简单介绍就到此为止了，如需深入了解，可以关注我的其他内容"></a>OC与JS交互的简单介绍就到此为止了，如需深入了解，可以关注我的其他内容</h2>]]></content>
    
    <summary type="html">
    
      分别使用 WKWebView 与 UIWebView 实现OC与JS简单交互，以及有关交互业务方面的一点点建议。
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="OC与JS交互" scheme="http://yoursite.com/tags/OC%E4%B8%8EJS%E4%BA%A4%E4%BA%92/"/>
    
      <category term="UIWebView" scheme="http://yoursite.com/tags/UIWebView/"/>
    
      <category term="WKWebView" scheme="http://yoursite.com/tags/WKWebView/"/>
    
  </entry>
  
  <entry>
    <title>cocoapods 安装 WCDB 报“Permission denied”错误</title>
    <link href="http://yoursite.com/2018/08/23/WCDB/WCDB%20cocoapods%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5/"/>
    <id>http://yoursite.com/2018/08/23/WCDB/WCDB cocoapods安装失败/</id>
    <published>2018-08-22T16:00:00.000Z</published>
    <updated>2018-08-28T15:41:14.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>腾讯去年开源的数据库第三方库<a href="https://github.com/Tencent/wcdb/wiki" target="_blank" rel="noopener">WCDB</a> 无疑成为了开发圈里的话题，作为一款生产工具，它绝不是话题那么简单，很多开发者都开始围绕 <a href="https://github.com/Tencent/wcdb/wiki" target="_blank" rel="noopener">WCDB</a> 优化自己的项目了。不过在使用之前也可能会遇到一些小问题，比如pod安装 <a href="https://github.com/Tencent/wcdb/wiki" target="_blank" rel="noopener">WCDB</a> 的时候，会修改xcode部分目录下的一些文件，这其中包括新增模板和代码块。当新增代码块的时候，有时候会安装失败，原因是保存代码快的目录<code>~/Library/Developer/Xcode/UserData/CodeSnippets/</code>属于 root 用户，对root用户为可读写，对其他用户为只读，所以，运行<code>$pod install</code> ，最终会报出有关权限不够的错误：<code>Permission denied</code>。</p><h2 id="Permission-denied-错误"><a href="#Permission-denied-错误" class="headerlink" title="Permission denied 错误"></a>Permission denied 错误</h2><pre><code>pod install Analyzing dependencies[!] The version of CocoaPods used to generate the lockfile (1.5.3) is higher than the version of the current executable (1.5.2). Incompatibility issues may arise.Downloading dependenciesInstalling WCDB (1.0.6)  [!] /bin/bash -c   set -egit submodule update --init sqlcipher;                           cd tools/templates; sh install.sh; cd ../..;                           cd sqlcipher; make -f Makefile.preprocessed; cd ..;                           cp sqlcipher/ext/fts3/fts3_tokenizer.h sqlcipher/Submodule path &apos;sqlcipher&apos;: checked out &apos;d4726337010f60408a9c99633b35f01a8a7ae2de&apos;Submodule &apos;sqlcipher&apos; (https://github.com/Tencent/sqlcipher.git) registered for path &apos;sqlcipher&apos;Cloning into &apos;~/Library/Caches/CocoaPods/Pods/Release/WCDB/1.0.6-4d292/sqlcipher&apos;...cp: ~/Library/Developer/Xcode/UserData/CodeSnippets/WCDB.ColumnCodableClass.Data.swift.codesnippet: Permission deniedcp: ~/Library/Developer/Xcode/UserData/CodeSnippets/WCDB.ColumnCodableClass.Double.swift.codesnippet: Permission deniedcp: ~/Library/Developer/Xcode/UserData/CodeSnippets/WCDB.ColumnCodableClass.Int32.swift.codesnippet: Permission deniedcp: ~/Library/Developer/Xcode/UserData/CodeSnippets/WCDB.ColumnCodableClass.Int64.swift.codesnippet: Permission deniedcp: ~/Library/Developer/Xcode/UserData/CodeSnippets/WCDB.ColumnCodableClass.String.swift.codesnippet: Permission deniedcp: ~/Library/Developer/Xcode/UserData/CodeSnippets/WCDB.TableCodableClass.swift.codesnippet: Permission denied  </code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>###方法一 </p><pre><code>$cd  ~/Library/Developer/Xcode/UserData/$sudo chmod -R 777 CodeSnippets$cd &quot;你的工程目录&quot;$pod install</code></pre><p>###方法二<br><strong>前往以下文件夹</strong></p><pre><code>~/Library/Developer/Xcode/UserData/</code></pre><p><strong>找到以下文件夹</strong></p><pre><code>CodeSnippets</code></pre><p><strong>右键-显示简介</strong></p><pre><code>在右下方解除锁定，修改staff用户的权限为读写</code></pre>]]></content>
    
    <summary type="html">
    
      pod安装 WCDB 的时候，会修改xcode部分目录下的一些文件，这其中包括新增模板和代码块。由于该目录的所属用户可能为root用户，又或者使用者权限不够，新增代码块的时候，有时候会安装失败。
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="cocoapods" scheme="http://yoursite.com/tags/cocoapods/"/>
    
      <category term="WCDB" scheme="http://yoursite.com/tags/WCDB/"/>
    
  </entry>
  
  <entry>
    <title>英语美文</title>
    <link href="http://yoursite.com/2018/08/22/EnglishStudy/English%20Article/"/>
    <id>http://yoursite.com/2018/08/22/EnglishStudy/English Article/</id>
    <published>2018-08-21T16:00:00.000Z</published>
    <updated>2018-08-25T14:21:49.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Benjamin-Button’s-Letter-to-Daughter"><a href="#Benjamin-Button’s-Letter-to-Daughter" class="headerlink" title="Benjamin Button’s Letter to Daughter"></a>Benjamin Button’s Letter to Daughter</h2><pre><code>For what it&apos;s worth:It&apos;s never too late,or in my case,too early to be whoever you want to be.There&apos;s no time limit. Start whenever you want.You can change or stay the same. There are no rules to this thing.We can make the best or the worst of it.I hope you make the best of it.And I hope you see things that startle you.I hope you feel things you never felt before.I hope you meet people with a defferent point of view.I hope you live a life you&apos;re proud of.If you find that you;re not, I hope you have the strength to start all over again.</code></pre><h2 id="If-You-Think…"><a href="#If-You-Think…" class="headerlink" title="If You Think…"></a>If You Think…</h2><pre><code>If you think you are beaten, you are.If you think you dare not, you don&apos;t.If you want win,but think you cant,it&apos;s almost a cinch you won&apos;t.If you think you&apos;ll lose,you&apos;re lost; for out in the world we find success begins with a fellow&apos;s will.It&apos;s all in the state of the mind.Life&apos;s gattles don&apos;t always go to the stronger and faster man.But sonner or later the man who wins is the man who thinks he can.</code></pre>]]></content>
    
    <summary type="html">
    
      每天阅读一篇英语短文，慢慢提升英语爱好。
    
    </summary>
    
      <category term="英语学习" scheme="http://yoursite.com/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="英语" scheme="http://yoursite.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="文章" scheme="http://yoursite.com/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>iOS 11 UITableView刷新漂移/抖动</title>
    <link href="http://yoursite.com/2018/08/08/iOS%E9%80%82%E9%85%8D%E5%B0%8F%E4%BC%98%E5%8C%96/iOS11%20tableView%E5%88%B7%E6%96%B0%E6%BC%82%E7%A7%BB%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/08/08/iOS适配小优化/iOS11 tableView刷新漂移问题/</id>
    <published>2018-08-07T16:00:00.000Z</published>
    <updated>2018-08-08T02:11:39.197Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我们做了什么？"><a href="#我们做了什么？" class="headerlink" title="我们做了什么？"></a>我们做了什么？</h3><ul><li>在我们的APP中，静态界面一般很少使用，大部分的页面都是用了UITableView，用来动态展示信息，这里少不了使用动态布局方案，以及Cell的动态高度计算方案，其中就包括预设高度，以及手动动态计算等。在iOS 11 之前，我们可能不会有任何问题，当我们来到iOS 11之后，问题来了，预设高度，让系统根据布局来动态计算的方案，在有些时候就出现了刷新TableView漂移的现象。</li></ul><h3 id="苹果的tabieView动态展示方案"><a href="#苹果的tabieView动态展示方案" class="headerlink" title="苹果的tabieView动态展示方案"></a>苹果的tabieView动态展示方案</h3><ul><li><p>在iOS 8中，苹果引入了UITableView 的一项新功能（Self Sizing Cells）,在iOS 8之前，如果想在UITableView中展示可变高度的动态内容时，需要开发者手动计算行高，Self Sizing Cells 的引入，为动态展示动态内容提供了一个解决方案，这个方案对系统cell和xib都有效。</p></li><li><p>根据苹果官方文档的解释：Self-Sizing开启之后，开发者不用再自己去计算cell的高度，只要设置好相关属性，约束好布局，系统会自动计算好cell的高度。</p></li><li><p>在iOS 11之前，Self Sizing Cells是默认不开启的，当我们来到iOS 11后系统默认开启Self-Sizing，此时，如果我们手动计算高度，有没有关闭Self Sizing Cells相关属性，刷新TableView的时候就可能会出现漂移现象。</p></li></ul><h3 id="我们要做什么？"><a href="#我们要做什么？" class="headerlink" title="我们要做什么？"></a>我们要做什么？</h3><ul><li><p>如果你不需要系统帮你计算cells高度，那么我们就应该关闭Self Sizing Cells相关属性：</p><pre><code>self.tableView.estimatedRowHeight=0;self.tableView.estimatedSectionHeaderHeight = 0;self.tableView.estimatedSectionFooterHeight = 0;</code></pre></li><li><p>如果我们需要系统帮忙计算cells高度，那么我们就应该利用好相关的属性：</p><pre><code>self.tableView.estimatedRowHeight = 100; //  设置任意不等于0 的值self.tableView.rowHeight = UITableViewAutomaticDimension;self.tableView.estimatedSectionHeaderHeight = 35;  // 如有需要也应该设置self.tableView.estimatedSectionFooterHeight = 35;  // 如有需要也应该设置</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      相信很多小伙伴来到iOS 11 之后，以前写的一些TableView内容突然开始不听实话，刷新的时候出现了漂移的现象，为什么呢，带着疑问，我们先来一探究竟吧。
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="小优化" scheme="http://yoursite.com/tags/%E5%B0%8F%E4%BC%98%E5%8C%96/"/>
    
      <category term="UITableView" scheme="http://yoursite.com/tags/UITableView/"/>
    
  </entry>
  
  <entry>
    <title>iOS组件化之路-同名文件带来的坑</title>
    <link href="http://yoursite.com/2018/08/01/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%88%B0%E7%9A%84%E5%9D%91/iOS%E5%B7%A5%E7%A8%8B%E5%A4%9Atarget%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/08/01/组件化到的坑/iOS工程多target问题/</id>
    <published>2018-07-31T16:00:00.000Z</published>
    <updated>2018-08-02T01:00:36.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案-一-最优雅的方式：功能一样的同名文件组件化"><a href="#方案-一-最优雅的方式：功能一样的同名文件组件化" class="headerlink" title="方案 一  最优雅的方式：功能一样的同名文件组件化"></a>方案 一  最优雅的方式：功能一样的同名文件组件化</h3><p>  这种方式应该是这个问题最优雅的解决方案了，在开发过程中要尽可能的避免项目中存在同名文件，他们往往是实现完全一样的功能的代码，既然我们都已经组件化了，那么同名文件自然而然的要想到做组件化处理，无需放在多个不一样的target中，只需要将这个共同的功能作为依赖库包含在不同的模块中即可。</p><h3 id="方案-二-取巧的方案：映射"><a href="#方案-二-取巧的方案：映射" class="headerlink" title="方案 二  取巧的方案：映射"></a>方案 二  取巧的方案：映射</h3><p>  这种情况仅仅在你不得不使用一个单利，但是你又暂时无法将某个同样的功能从两个target中剥离出来（比如微信支付），那么将会在两个target中共同存在相同的微信SDK，此时支付等功能的回调肯定需要依赖一个中间对象，那么就必须保证无论你是在同一个target下，还是多个target下，都必须是同一个实例对象。而你在不同的target下的同名文件，即使你这个类是单例，实例化对象的时候也不可能返回同一个实例对象，那么此时，只能一方移除该文件，不在引用该类的头文件，使用映射的方式，以字符串生成类名来实例出某个特定的单利（前提是你的单利实例化方法一定要写的够完善），此方案仅仅适合作为临时取巧，仅仅是一种解决方案。</p>]]></content>
    
    <summary type="html">
    
      场景描述：在公司的开发过程中，我们采用了组件化的方式，将代码按照相关功能进行剥离，同时对某些相应的模块独立到一个单独的工程里开发，两个工程里面均独立包含第三方支付功能，那么此时，两个工程里面都包含同样的第三方支付SDK。当代码实施组件化之后，他们可以存在于同一个工程里面，此时可能会引起一些问题，对这些&quot;微信&quot;、&quot;支付宝&quot;等第三方SDK在APP delegate中的回调，我们通常会自己实现一些起中间处理的helper类或者单利来方便全局调用。在不同target下的单利，实例化之后，虽然是同名类，但是实例化出来却不是同一个对象，这导致主工程里面的delegate无法令除主工程以外的target下的回调生效，这是我在处理微信支付的过程中所遇到的问题。
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="坑" scheme="http://yoursite.com/tags/%E5%9D%91/"/>
    
      <category term="组件化" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
      <category term="多target" scheme="http://yoursite.com/tags/%E5%A4%9Atarget/"/>
    
  </entry>
  
  <entry>
    <title>英语美句</title>
    <link href="http://yoursite.com/2018/07/29/EnglishStudy/English%20Sentences/"/>
    <id>http://yoursite.com/2018/07/29/EnglishStudy/English Sentences/</id>
    <published>2018-07-28T16:00:00.000Z</published>
    <updated>2018-08-08T03:13:04.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="英语美句"><a href="#英语美句" class="headerlink" title="英语美句"></a>英语美句</h1><h2 id="每天收集一些精美的英语小句子，慢慢提升英语爱好。"><a href="#每天收集一些精美的英语小句子，慢慢提升英语爱好。" class="headerlink" title="每天收集一些精美的英语小句子，慢慢提升英语爱好。"></a>每天收集一些精美的英语小句子，慢慢提升英语爱好。</h2><ul><li><p>赠人玫瑰，手有余香。<br>  Give a person a rose and keep his hand in the rost. </p></li><li><p>两颗相爱的心之间不需要言语。<br>  No words are necessary between two loving hearts.</p></li><li><p>成功者是坚持梦想不放弃的人。<br>  A winner is a dreamer who never gives up.</p></li></ul>]]></content>
    
    <summary type="html">
    
      每天收集一些精美的英语小句子，慢慢提升英语爱好。
    
    </summary>
    
      <category term="英语学习" scheme="http://yoursite.com/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="英语" scheme="http://yoursite.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>iOS 10.3 UILabel 中划线无效</title>
    <link href="http://yoursite.com/2018/05/15/iOS%2010%20%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/iOS%2010.3%20UILabel%20%E5%88%A0%E9%99%A4%E7%BA%BF%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/15/iOS 10 适配问题汇总/iOS 10.3 UILabel 删除线问题/</id>
    <published>2018-05-15T13:36:43.000Z</published>
    <updated>2018-08-01T12:05:55.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在iOS10-3系统-给-UILabel-添加中划线失效"><a href="#在iOS10-3系统-给-UILabel-添加中划线失效" class="headerlink" title="在iOS10.3系统 给 UILabel 添加中划线失效"></a>在iOS10.3系统 给 UILabel 添加中划线失效</h2><h3 id="通常使用的代码为"><a href="#通常使用的代码为" class="headerlink" title="通常使用的代码为"></a>通常使用的代码为</h3><pre><code>- (NSMutableAttributedString *)setUnderlineStyle {// 此方法为我们常用的方法[self setAttributes:@{NSStrikethroughStyleAttributeName: [NSNumber numberWithInteger:NSUnderlineStyleSingle]} range:NSMakeRange(0, self.length)];return self;}</code></pre><p>###以下代码将一举解决 iOS10.3 中划线不生效的系统bug</p><pre><code>- (NSMutableAttributedString *)setUnderlineStyle {    // 此 一举解决 iOS 10.3 不显示删除线的系统bug    [self setAttributes:@{NSStrikethroughStyleAttributeName: [NSNumber numberWithInteger:NSUnderlineStyleSingle],NSBaselineOffsetAttributeName : @(NSUnderlineStyleSingle)} range:NSMakeRange(0, self.length)];    return self; }</code></pre>]]></content>
    
    <summary type="html">
    
      在iOS10.3系统 给 UILabel 添加中划线失效
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="NSString" scheme="http://yoursite.com/tags/NSString/"/>
    
      <category term="iOS 10.3 代码适配问题" scheme="http://yoursite.com/tags/iOS-10-3-%E4%BB%A3%E7%A0%81%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    
      <category term="UILabel" scheme="http://yoursite.com/tags/UILabel/"/>
    
  </entry>
  
  <entry>
    <title>人民币货币符号与价格之间的空格</title>
    <link href="http://yoursite.com/2018/05/15/iOS%E9%80%82%E9%85%8D%E5%B0%8F%E4%BC%98%E5%8C%96/iOS9%20%E4%BA%BA%E6%B0%91%E5%B8%81%E7%AC%A6%E5%8F%B7%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/15/iOS适配小优化/iOS9 人民币符号适配问题/</id>
    <published>2018-05-15T13:14:43.000Z</published>
    <updated>2018-08-08T01:23:55.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iOS-9系统下-“人民币的特殊性”"><a href="#iOS-9系统下-“人民币的特殊性”" class="headerlink" title="iOS 9系统下 “人民币的特殊性”"></a>iOS 9系统下 “人民币的特殊性”</h2><pre><code>NSString * string = @&quot;9999&quot;;NSNumberFormatter *moneyFormatter = [[NSNumberFormatter alloc] init];moneyFormatter.numberStyle = kCFNumberFormatterCurrencyStyle;NSString *priceString = [moneyFormatter stringFromNumber:[NSNumber numberWithDouble:[string doubleValue]]];NSMutableString *priceMstr = [NSMutableString stringWithFormat:@&quot;%@&quot;,priceString];NSLog(@&quot;%@&quot;,priceMstr);</code></pre><p> 其输出结果为 “￥ 9,999.00” ，而不是我们预期的 “￥9,999.00”。</p><pre><code> ￥ 与 &quot;9,999.00&quot; 之间的空白地带，是无法用替换空格的方式直接消除的的。 即使用如下方法将不起作用 NSRange range = [priceMstr rangeOfString:@&quot; &quot;]; if (range.location != NSNotFound) {    [priceMstr replaceCharactersInRange:range withString:@&quot;&quot;];}</code></pre><p>看来它是一个特殊的字符那么我们不得不采用其他的办法来处理。</p><p>添加如下代码即可处理掉人民币货币符号 与 价格之间的空格:</p><pre><code>[priceMstr stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];</code></pre>]]></content>
    
    <summary type="html">
    
      人民币是一种特殊的货币吗？答案是：是的。当使用系统自带方法，给货币自动添加货币符号，以及价格千分位之后，在iOS 9系统上，如果货币为人民币，人民币会与其他货币符号产生不一样的输出效果，即人民币符号&quot;￥&quot;与价格之间会有一个空白间距。
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="小优化" scheme="http://yoursite.com/tags/%E5%B0%8F%E4%BC%98%E5%8C%96/"/>
    
      <category term="NSString" scheme="http://yoursite.com/tags/NSString/"/>
    
      <category term="kCFNumberFormatterCurrencyStyle" scheme="http://yoursite.com/tags/kCFNumberFormatterCurrencyStyle/"/>
    
  </entry>
  
  <entry>
    <title>用CollectionView实现环形布局</title>
    <link href="http://yoursite.com/2018/05/10/CollectionView/CollectionView%E5%AE%9E%E7%8E%B0%E7%8E%AF%E5%BD%A2%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/05/10/CollectionView/CollectionView实现环形布局/</id>
    <published>2018-05-09T17:08:43.000Z</published>
    <updated>2018-08-08T02:22:27.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XFCyclicAnnularFlowLayout"><a href="#XFCyclicAnnularFlowLayout" class="headerlink" title="XFCyclicAnnularFlowLayout"></a>XFCyclicAnnularFlowLayout</h2><h3 id="CollectionView-实现扇形（环形）布局"><a href="#CollectionView-实现扇形（环形）布局" class="headerlink" title="CollectionView 实现扇形（环形）布局"></a>CollectionView 实现扇形（环形）布局</h3><font color="green" size="4.5"><strong>功能设置</strong></font><ul><li><p>1.设置有多少层扇形（环形）</p></li><li><p>2.设置该层有多少元素</p></li><li><p>3.设置元素大小Size</p></li><li><p>4.设置该层环绕的半径</p></li><li><p>5.设置该层扇形的展开弧度</p></li><li><p>6.设置所有元素的朝向</p><ul><li><font color="#660000">朝上（默认）</font><br></li><li><font color="#660000">朝下</font><br></li><li><font color="#660000">朝里（头部指向圆心）</font><br></li><li><font color="#660000">朝外（头部与环形法线方向一致）</font><br></li></ul></li><li><p>7.设置该层环形中所有元素是否顺时针排布</p><ul><li><font color="#660000">默认是顺时针排布</font><br></li></ul></li></ul><font color="green" ,="" size="4.5"><strong>API说明</strong></font><ul><li><p><strong>当前组的扇形（环形）半径</strong></p><pre><code>- (CGFloat)flowLayout:(XFCyclicAnnularFlowLayout *)flowLayout cyclicAnnularRadiusInSection:(NSInteger)section;</code></pre><p>  <strong><em>返回参数类型值说明如下：</em></strong></p><pre><code>CGFloat 返回当前组扇形（环形）的半径 (单位: π)</code></pre></li><li><p><strong>当前位置Cell的大小（size）</strong></p><pre><code>- (CGSize)flowLayout:(XFCyclicAnnularFlowLayout *)flowLayout cyclicAnnularItemSizeAtindexPath:(NSIndexPath *)indexPath;</code></pre><p>  <strong><em>返回参数类型值说明如下：</em></strong></p><pre><code>CGSize  返回当前位置（indexPath）cell的大小</code></pre></li></ul><ul><li><p><strong>当前组的弧度范围（即该组展开弧度）</strong></p><pre><code>- (CGFloat)flowLayout:(XFCyclicAnnularFlowLayout *)flowLayout cyclicAnnularRadianInSection:(NSInteger)section;</code></pre><p>   <strong><em>返回参数类型值说明如下：</em></strong></p><pre><code>CGFloat  返回当前组元素在视图上展开的弧度范围</code></pre></li><li><p><strong>该组元素在扇形区域内是否顺时针展开</strong></p><pre><code>- (BOOL )flowLayout:(XFCyclicAnnularFlowLayout *)flowLayout cyclicIsClockwiseInSection:(NSInteger)section;</code></pre><p>  <strong><em>返回参数类型值说明如下：</em></strong></p><pre><code>BOOL  该返回值设定视图当前环形中cell是顺时针依次排列，还是逆时针依次排列，默认是顺时针</code></pre></li><li><p><strong>元素朝向</strong></p><pre><code>- (XFCyclicAnnularItemOrientation )cyclicAnnularItemOrientationInFlowLayout:(XFCyclicAnnularFlowLayout *)flowLyout;</code></pre><p>  <strong><em>返回参数类型值说明如下：</em></strong></p></li></ul><pre><code>typedef NS_ENUM(NSUInteger, XFCyclicAnnularItemOrientation) {    XFCyclicAnnularItemOrientationUp,           // 朝上 默认    XFCyclicAnnularItemOrientationDown,         // 朝下    XFCyclicAnnularItemOrientationInside,       // 朝内    XFCyclicAnnularItemOrientationOutside       // 朝外};</code></pre>]]></content>
    
    <summary type="html">
    
      用很多时候,项目中会出现一系列元素排布在一系列圆环至上,该文章将给到一个用UIColectionView来实现该需求的基本思路,该方案API简单易理解,使用方便。
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="环形布局" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%BD%A2%E5%B8%83%E5%B1%80/"/>
    
      <category term="UICollectionView" scheme="http://yoursite.com/tags/UICollectionView/"/>
    
      <category term="UICollectionViewFlowLayout" scheme="http://yoursite.com/tags/UICollectionViewFlowLayout/"/>
    
  </entry>
  
  <entry>
    <title>程序员应该知道自己要做什么</title>
    <link href="http://yoursite.com/2017/07/16/H.264/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    <id>http://yoursite.com/2017/07/16/H.264/程序人生/</id>
    <published>2017-07-16T12:33:43.000Z</published>
    <updated>2018-08-28T15:38:31.760Z</updated>
    
    <content type="html"><![CDATA[<p>写在这里，告诉自己，职业人生应该是有一定自我主动权的。</p><p>不要因为工作放弃自己曾经那份充满热爱的感觉。</p><p>总是会越写越困，困的时候会失去动力，是坚持不下去，还是真的累了呢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写在这里，告诉自己，职业人生应该是有一定自我主动权的。&lt;/p&gt;
&lt;p&gt;不要因为工作放弃自己曾经那份充满热爱的感觉。&lt;/p&gt;
&lt;p&gt;总是会越写越困，困的时候会失去动力，是坚持不下去，还是真的累了呢。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
